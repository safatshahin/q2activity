{"version":3,"file":"q2activity.min.js","sources":["../src/q2activity.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Add to quiz action selector js.\n *\n * @module     qbank_q2activity/q2activity\n * @copyright   2022 Harrison Liddell, hliddell@myune.edu.au\n * @copyright   Mark Hay,              mhay23@myune.edu.au\n * @copyright   Henry Campbell,        hcampb25@myune.edu.au\n * @copyright   Luke Purnell,          lpurnell@myune.edu.au\n * @license     https://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport Fragment from 'core/fragment';\nimport * as Str from 'core/str';\nimport ModalFactory from 'core/modal_factory';\nimport Notification from 'core/notification';\n\n/**\n * Get the fragment.\n *\n * @method getFragment\n * @param {array} args\n * @param {int} contextId\n * @return {string}\n */\nconst getFragment = (args, contextId) => {\n    return Fragment.loadFragment('qbank_q2activity', 'add_question', contextId, args);\n};\n\n// /**\n//  * Event listeners for the module.\n//  *\n//  * @method clickEvent\n//  * @param {int} questionId\n//  * @param {int} contextId\n//\n//  */\n// const addActivityEvent = (questionId, contextId) => {\n//     let args = {\n//         questionid: questionId\n//     };\n//     ModalFactory.create({\n//         type: ModalFactory.types.CANCEL,\n//         title: Str.get_string('pluginname', 'qbank_q2activity'),\n//         //body: getFragment(args, contextId),\n//         body: '<h4>MODAL FACTORY BODY<h4>',\n//         large: true,\n//     }).then((modal) => {\n//         modal.show();\n//\n//         modal.getRoot().on('click', 'a[href].page-link', function(e) {\n//             e.preventDefault();\n//             // let href = e.target.getAttribute(\"href\");\n//             // let querystring = e.target.getAttribute(\"formaction\");\n//             //\n//             args.href = \"\";\n//             // args.querystring = \"\";\n//             let a = getFragment(questionId, contextId);\n//             alert(a);\n//             // if (href) {\n//             //     args.href = href;\n//             // }\n//             // if (querystring) {\n//             //     args.querystring = querystring;\n//             // }\n//\n//             //modal.setBody(getFragment(args, contextId));\n//             modal.setBody('<h4>MODAL then BODY</h4>');\n//         });\n//\n//         return modal;\n//     }).fail(Notification.exception);\n// };\n/**\n * Event listeners for the module.\n *\n * @method clickEvent\n * @param {int} questionId\n * @param {string} request\n * @param {int} contextId\n */\nconst addActivityEvent = (questionId, request,  contextId) => {\n    let args = {\n        questionid: questionId,\n        rawrequest: request.toString()\n    };\n    ModalFactory.create({\n        type: ModalFactory.types.CANCEL,\n        title: Str.get_string('pluginname', 'qbank_q2activity'),\n        body: getFragment(args, contextId),\n        large: true,\n    }).then((modal) => {\n        modal.show();\n        modal.getRoot().on('click', 'a[href].page-link', function(e) {\n            e.preventDefault();\n            let attr = e.target.getAttribute(\"href\");\n            if (attr !== '#') {\n                args.querystring = attr;\n                modal.setBody(getFragment(args, contextId));\n            }\n        });\n        return modal;\n    }).fail(Notification.exception);\n};\n/**\n * Entrypoint of the js.\n *\n * @method init\n * @param {int} questionSelector the question identifier.\n * @param {string} request raw request data\n * @param {int} contextId the question context id.\n /* @param {array} params parameters.\n */\nexport const init = (questionSelector, request, contextId) => {\n    let target = document.querySelector(questionSelector);\n    // Single action - contextId drawn from specific question\n    if (contextId) {\n\n        let questionId = target.getAttribute('data-questionid');\n        target.addEventListener('click', () => {\n            // Call for the event listener to listed for clicks in any usage count row.\n            addActivityEvent(questionId, request, contextId);\n        });\n    }\n    // Bulk action - indicated by lack of context ID - we will need to get this and question numbers here\n    else{\n        target.onclick = (ev) => {\n            ev.preventDefault();\n        };\n\n        let questionId = -1;\n        let contextId = 2;\n\n        target.addEventListener('click', () => {\n            addActivityEvent(questionId, request, contextId);\n        });\n    }\n};\n"],"names":["getFragment","args","contextId","Fragment","loadFragment","addActivityEvent","questionId","request","questionid","rawrequest","toString","create","type","ModalFactory","types","CANCEL","title","Str","get_string","body","large","then","modal","show","getRoot","on","e","preventDefault","attr","target","getAttribute","querystring","setBody","fail","Notification","exception","questionSelector","document","querySelector","addEventListener","onclick","ev"],"mappings":";;;;;;;;;;o4BAuCMA,YAAc,CAACC,KAAMC,YAChBC,kBAASC,aAAa,mBAAoB,eAAgBF,UAAWD,MAuD1EI,iBAAmB,CAACC,WAAYC,QAAUL,iBACxCD,KAAO,CACPO,WAAYF,WACZG,WAAYF,QAAQG,mCAEXC,OAAO,CAChBC,KAAMC,uBAAaC,MAAMC,OACzBC,MAAOC,IAAIC,WAAW,aAAc,oBACpCC,KAAMnB,YAAYC,KAAMC,WACxBkB,OAAO,IACRC,MAAMC,QACLA,MAAMC,OACND,MAAME,UAAUC,GAAG,QAAS,qBAAqB,SAASC,GACtDA,EAAEC,qBACEC,KAAOF,EAAEG,OAAOC,aAAa,QACpB,MAATF,OACA3B,KAAK8B,YAAcH,KACnBN,MAAMU,QAAQhC,YAAYC,KAAMC,gBAGjCoB,SACRW,KAAKC,sBAAaC,0BAWL,CAACC,iBAAkB7B,QAASL,iBACxC2B,OAASQ,SAASC,cAAcF,qBAEhClC,UAAW,KAEPI,WAAauB,OAAOC,aAAa,mBACrCD,OAAOU,iBAAiB,SAAS,KAE7BlC,iBAAiBC,WAAYC,QAASL,kBAI1C,CACA2B,OAAOW,QAAWC,KACdA,GAAGd,sBAGHrB,YAAc,EACdJ,UAAY,EAEhB2B,OAAOU,iBAAiB,SAAS,KAC7BlC,iBAAiBC,WAAYC,QAASL"}